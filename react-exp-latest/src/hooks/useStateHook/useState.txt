1] calling a useState setter function triggers component rerender.
2] value set by useState setter function is not used in current render but in next render.
3] react collects all the useState setter calls in a queue. Then once all the event handlers of current render 
are run, react re-renders the component, and then execute all the useState setter calls in a queue.
This is called as batching state updates.
4] set function behaviour.
The set function only updates the state variable for the next render. If you read the state 
variable after calling the set function, you will still get the old value that was on the screen 
before your call.

If the new value you provide is identical to the current state, as determined by an Object.is 
comparison, React will skip re-rendering the component and its children. This is an optimization. 
Although in some cases React may still need to call your component before skipping the children, 
it shouldn’t affect your code.

React batches state updates. It updates the screen after all the event handlers have run and 
have called their set functions. This prevents multiple re-renders during a single event. In the rare 
case that you need to force React to update the screen earlier, for example to access the DOM, you 
can use flushSync.

5] Avoiding recreating the initial state 
React saves the initial state once and ignores it on the next renders.
Notice that you’re passing initPrimaryCount, which is the function itself, 
and not initPrimaryCount(), which is the result of calling it. If you pass a function to useState, 
React will only call it during initialization.

6] Resetting state with a key 
You’ll often encounter the key attribute when rendering lists. However, it also serves another purpose.

You can reset a component’s state by passing a different key to a component. In this example, 
the Reset button changes the version state variable, which we pass as a key to the Form. When the key 
changes, React re-creates the Form component (and all of its children) from scratch, so its state gets reset.






