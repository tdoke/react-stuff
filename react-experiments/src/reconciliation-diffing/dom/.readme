
https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction
The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so that 
programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, 
programming languages can connect to the page.

A Web page is a document. This document can be either displayed in the browser window or as the HTML source. 
But it is the same document in both cases. The Document Object Model (DOM) represents that same document so it can be manipulated. 
The DOM is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript.

The short example above, like nearly all of the examples in this reference, is JavaScript. That is to say, 
it's written in JavaScript, but it uses the DOM to access the document and its elements. The DOM is not a programming language, 
but without it, the JavaScript language wouldn't have any model or notion of web pages, HTML documents, XML documents, and their 
component parts (e.g. elements). Every element in a document—the document as a whole, the head, tables within the document, table 
headers, text within the table cells—is part of the document object model for that document, so they can all be accessed and 
manipulated using the DOM and a scripting language like JavaScript.

In the beginning, JavaScript and the DOM were tightly intertwined, but eventually, they evolved into separate entities. 
The page content is stored in the DOM and may be accessed and manipulated via JavaScript, so that we may write this 
approximative 
equation:

API = DOM + JavaScript

The DOM was designed to be independent of any particular programming language, making the structural representation of the 
document available from a single, consistent API. Though we focus exclusively on JavaScript in this reference documentation, 
implementations of the DOM can be built for any language, as this Python example demonstrates:


1] elements in HTML documents are represented in DOM tree, where each element is a node.
2] see dom tree created (using https://software.hixie.ch/utilities/js/live-dom-viewer/) 
3] each node in dom tree is an object with meta information about it.
   eg. div would be 
   {
     childeNodes: [],
     parentNode:,
     style: {
       ...all css properties
     },
     .....all event handlers like (onChange,onClick, onDrop...etc),

     offsetTop:,
     offsetLeft:,
     offsetWidth:,
     offsetHeight:, // position co-ordinates about div

     attributes: [], // arrayof attributes
     innerHTML,
     outerHTML,
     children,
     className,
     classList,
     shadowRoot,
}
4] dom manipulation cheat sheet
https://gist.github.com/thegitfather/9c9f1a927cd57df14a59c268f118ce86
5] dom reference cheat sheet https://overapi.com/html-dom
6] how dom works https://www.youtube.com/watch?v=2Tld4yyN_tw
